/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/v2/apps/{appId}": {
    /** Retrieve an application definition */
    get: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Application"];
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
      };
    };
  };
  "/v2/apps": {
    /** Retrieve all application definitions */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AllApplicationsResponse"];
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Server error */
        500: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
      };
    };
  };
  "/v1/apps/{appId}": {
    /**
     * Retrieve an application definition
     * @deprecated
     */
    get: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ApplicationV1"];
          };
        };
        /** @description Bad request. */
        400: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Forbidden: Certificate authentication is not allowed for the requested user. */
        403: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Server error, see response body for further details. */
        500: {
          content: {
            "*/*": components["schemas"]["ErrorDTO"];
          };
        };
      };
    };
  };
  "/v1/apps": {
    /**
     * Create a new application definition
     * @deprecated
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ApplicationV1"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ApplicationSearchResponseV1"];
          };
        };
        /** @description Bad request. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Forbidden: Certificate authentication is not allowed for the requested user. */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Server error, see response body for further details. */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorDTO"];
          };
        };
      };
    };
  };
  "/v1/apps/search": {
    /**
     * Retrieve a list of applications based on parameters provided.  Depending on implementation, parameter values should self describe search format and type (e.g. Regex)
     * @deprecated
     */
    get: {
      parameters: {
        query?: {
          /** @description The unique application identifier located within a specific application directory instance. */
          appId?: string;
          /** @description The name of the application. The name should be unique within an FDC3 App Directory instance. The exception to the uniqueness constraint is that an App Directory can hold definitions for multiple versions of the same app. The same appName could occur in other directories. We are not currently specifying app name conventions in the document. */
          name?: string;
          /** @description Version of the application. This allows multiple app versions to be defined using the same app name. This can be a triplet but can also include things like 1.2.5 (BETA) */
          version?: string;
          /** @description Optional title for the application, if missing use appName, typically used in a launcher UI. */
          title?: string;
          /** @description Optional tooltip description e.g. for a launcher */
          tooltip?: string;
          /** @description Description of the application. This will typically be a 1-2 paragraph style blurb about the application. Allow mark up language */
          description?: string;
          /** @description name of intent */
          intent_name?: string;
          /** @description displayName of intent */
          intent_displayName?: string;
          /** @description search contexts list */
          intent_context?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ApplicationSearchResponseV1"];
          };
        };
        /** @description Bad request. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Forbidden: Certificate authentication is not allowed for the requested user. */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorDTO"];
          };
        };
        /** @description Server error, see response body for further details. */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorDTO"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ErrorDTO: {
      /** Format: int32 */
      code?: number;
      message?: string;
    };
    BaseApplication: {
      /** @description The unique application identifier located within a specific application directory instance. */
      appId?: string;
      /** @description Title for the application, typically used in a launcher UI. */
      title?: string;
      type?: components["schemas"]["Type"];
      details?: components["schemas"]["LaunchDetails"];
      /**
       * @deprecated
       * @description Deprecated in favour of using `appId` to identify apps and `title` for their display names. The name of the application. The name should be unique within an FDC3 App Directory instance. The exception to the uniqueness constraint is that an App Directory can hold definitions for multiple versions of the same app. The same appName could occur in other directories. We are not currently specifying app name conventions in the document.
       */
      name?: string;
      /** @description Version of the application. This allows multiple app versions to be defined using the same app name. This can be a triplet but can also include things like 1.2.5 (BETA) */
      version?: string;
      /** @description Optional tooltip description e.g. for a launcher */
      tooltip?: string;
      /** @description A language tag that specifies the primary language of both the application and its AppD entry, as defined by IETF RFC 5646. */
      lang?: string;
      /** @description Description of the application. This will typically be a 1-2 paragraph style blurb about the application. */
      description?: string;
      /**
       * @description An array of string categories that describe the application. These are meant as a hint to catalogs or stores listing FDC3-enabled apps and it is expected that these will make a best effort to find appropriate categories (or category) under which to list the app. AppD record authors are encouraged to use lower-case and, where possible, to select categories from the following list:
       *
       * - allocations
       * - analytics
       * - charts
       * - chat
       * - communication
       * - compliance
       * - crm
       * - developer tools
       * - events
       * - execution management
       * - file sharing
       * - market data
       * - news
       * - networking
       * - office apps
       * - order management
       * - other
       * - portfolio management
       * - presentation
       * - pricing
       * - productivity
       * - research
       * - risk
       * - screen sharing
       * - security
       * - spreadsheet
       * - trade cost analysis
       * - trading system
       * - training
       * - travel
       * - video
       * - visualization
       * - weather
       */
      categories?: string[];
      /** @description Holds Icons used for the application, a Launcher may be able to use multiple Icon sizes or there may be a 'button' Icon */
      icons?: components["schemas"]["Icon"][];
      /** @description Array of images to show the user when they are looking at app description. Each image can have an optional description/tooltip */
      screenshots?: components["schemas"]["Screenshot"][];
      /**
       * Format: email
       * @description Optional e-mail to receive queries about the application
       */
      contactEmail?: string;
      /**
       * Format: email
       * @description Optional e-mail to receive support requests for the application
       */
      supportEmail?: string;
      /**
       * Format: uri
       * @description Optional URL that provides more information about the application
       */
      moreInfo?: string;
      /** @description The name of the company that owns the application. The publisher has control over their namespace/app/signature. */
      publisher?: string;
      /**
       * @deprecated
       * @description An optional set of name value pairs that can be used to deliver custom data from an App Directory to a launcher. Deprecated due to a lack of a standard means of retrieval via the Desktop Agent API. To be replaced in a future version with an `applicationConfig` element and standard API to retrieve it. See issue  [#1006](https://github.com/finos/FDC3/issues/1006) for details.
       */
      customConfig?: components["schemas"]["NameValuePair"][];
      hostManifests?: components["schemas"]["HostManifests"];
      interop?: components["schemas"]["Interop"];
    };
    /** @description Defines an application retrieved from an FDC3 App Directory, which can then be launched. Launching typically means running for a user on a desktop. The details around 'launching' including who or what might do it, and how the launch action is initiated are discussed elsewhere in the FDC3 App Directory spec. */
    Application: WithRequired<components["schemas"]["BaseApplication"] & {
      localizedVersions?: components["schemas"]["LocalizedVersions"];
    }, "appId" | "title" | "type" | "details">;
    AllApplicationsResponse: {
      /** @description List of applications */
      applications?: components["schemas"]["Application"][];
      /** @description Response message providing status of query */
      message?: string;
    };
    /** @description Simple name value pair */
    NameValuePair: {
      /** @description name */
      name?: string;
      /** @description value */
      value?: string;
    };
    /** @description Icon holder */
    Icon: {
      /**
       * Format: uri
       * @description Icon URL
       */
      src: string;
      /** @description Icon dimension formatted as `<height>x<width>` */
      size?: string;
      /** @description Image media type. If not present the Desktop Agent may use the src file extension */
      type?: string;
    };
    /** @description Images representing the app in common usage scenarios */
    Screenshot: {
      /**
       * Format: uri
       * @description App Image URL
       */
      src: string;
      /** @description Image dimension formatted as `<height>x<width>` */
      size?: string;
      /** @description Image media type. If not present the Desktop Agent may use the src file extension. */
      type?: string;
      /** @description Optional caption for the image */
      label?: string;
    };
    /**
     * @description The technology type that is used to launch and run the application. Each application type implies a particular set of launch `details`.
     * The supported types include:
     *
     * - `web`: Web applications launched via a URL
     * - `native`: Native applications pre-installed on a device and launch via a filesystem path
     * - `citrix`: Apps virtualized via Citrix
     * - `onlineNative`: Native apps that have an online launcher, e.g. online ClickOnce app deployments.
     * - `other`: Used to represent apps that do not conform to or cannot be launched via the other types, and are likely to be defined solely by a hostManifest.
     *
     * FDC3 Desktop Agents MUST support at least the `web` application type and MAY support any or all of the other types.
     * @enum {string}
     */
    Type: "web" | "native" | "citrix" | "onlineNative" | "other";
    /** @description The type specific launch details of the application. These details are intended to be vendor-agnostic and MAY be duplicated or overridden by details provided in the hostManifests object for a specific host. */
    LaunchDetails: components["schemas"]["WebAppDetails"] | components["schemas"]["NativeAppDetails"] | components["schemas"]["CitrixAppDetails"] | components["schemas"]["OnlineNativeAppDetails"] | components["schemas"]["OtherAppDetails"];
    /** @description Properties used to launch apps with `type: web`. */
    WebAppDetails: {
      /**
       * Format: uri
       * @description Application start URL.
       */
      url: string;
    };
    /** @description Properties used to launch apps with `type: native` that are already installed on the device. */
    NativeAppDetails: {
      /** @description The path on disk from which the application is launched. */
      path: string;
      /** @description Arguments that must be passed on the command line to launch the app in the expected configuration. */
      arguments?: string;
    };
    /** @description Properties used to launch apps virtualized apps with `type: citrix`. */
    CitrixAppDetails: {
      /** @description The Citrix alias / name of the virtual app (passed to the Citrix SelfService qlaunch parameter). */
      alias: string;
      /** @description Arguments that must be passed on the command line to launch the app in the expected configuration. */
      arguments?: string;
    };
    /** @description Properties used to launch a native apps with `type: onlineNative` that have an online launcher, e.g. online ClickOnce app deployments. */
    OnlineNativeAppDetails: {
      /**
       * Format: uri
       * @description Application URL.
       */
      url: string;
    };
    /** @description Apps with `type: other` are defined by a hostManifest and do not require other details. */
    OtherAppDetails: unknown;
    /** @description A mapping from host name to a host-specific application manifest object or URI from which that manifest can be retrieved. The manifest should provide details required to launch and use the application within the specified host. The manifest _MAY_ duplicate or  override information provided in the `details` field. */
    HostManifests: {
      [key: string]: string | components["schemas"]["HostManifest"];
    };
    /** @description Object containing all host specific properties. */
    HostManifest: Record<string, never>;
    /** @description Provides localized alternatives to any field of the AppD record, which may also refer to an alternative version of the application that is also localized (e.g. by providing an alternative URL).  The keys to this object should be language tags as defined by IETF RFC 5646, e.g. en, en-GB or fr-FR. */
    LocalizedVersions: {
      [key: string]: components["schemas"]["BaseApplication"];
    };
    /** @description Definition of an intent that an app listens for */
    Intent: {
      /**
       * @deprecated
       * @description Optional display name for the intent. Deprecated in favour of the intent name, which is common amongst all apps that support it, where the display name may vary as it is defined in the app's AppD record.
       */
      displayName?: string;
      /** @description A comma separated list of the types of contexts the intent offered by the application can process, where the first part of the context type is the namespace e.g."fdc3.contact, org.symphony.contact" */
      contexts: string[];
      /** @description An optional type for output returned by the application, if any, when resolving this intent. May indicate a context type by type name (e.g. "fdc3.instrument"), a channel (e.g. "channel") or a combination that indicates a channel that returns a particular context type (e.g. "channel<fdc3.instrument>"). */
      resultType?: string;
      /**
       * @deprecated
       * @description Custom configuration for the intent that may be required for a particular desktop agent. Deprecated due to a lack of defined use cases.
       */
      customConfig?: Record<string, never>;
    };
    /**
     * @description Metadata that describes how the application uses FDC3 APIs. This metadata serves multiple purposes:
     *
     * - It supports intent resolution by a desktop agent, by declaring what intents an app listens for.
     * - It may be used, for example in an app catalog UI, to find apps that 'interoperate with' other apps.
     * - It provides a standard location to document how the app interacts with user channels, app channels, and intents, for use by other app developers and desktop assemblers.
     */
    Interop: {
      /** @description Describes the app's interactions with intents. */
      intents?: {
        /**
         * @description A mapping of Intents names that an app listens for via `fdc3.addIntentListener()` to their configuration.
         *
         * Used to support intent resolution by desktop agents. Replaces the `intents` element used in appD records prior to FDC3 2.0.
         */
        listensFor?: {
          [key: string]: components["schemas"]["Intent"];
        };
        /**
         * @description A mapping of Intent names that an app raises (via `fdc3.raiseIntent`) to an array of context type names that it may be raised with.
         *
         * Use the intent name "any" to represent use of the `fdc3.raiseIntentForContext` and `fdc3.findIntentForContext` functions, which allow the user to select from intents available for a specified context type.
         *
         * This metadata is not currently used by the desktop agent, but is provided to help find apps that will interoperate with this app and to document API interactions for use by other app developers.
         */
        raises?: {
          [key: string]: string[];
        };
      };
      /**
       * @description Describes the application's use of context types on User Channels.
       *
       * This metadata is not currently used by the desktop agent, but is provided to help find apps that will interoperate with this app and to document API interactions for use by other app developers.
       */
      userChannels?: {
        /** @description Context type names that are broadcast by the application. */
        broadcasts?: string[];
        /** @description Context type names that the application listens for. */
        listensFor?: string[];
      };
      /**
       * @description Describes the application's use of App Channels.
       *
       * This metadata is not currently used by the desktop agent, but is provided to help find apps that will interoperate with this app and to document API interactions for use by other app developers.
       */
      appChannels?: {
          /** @description The id of the App Channel. N.b. in FDC3 2.0 this field was incorrectly called `name`. */
          id: string;
          /** @description A description of how the channel is used. */
          description?: string;
          /** @description Context type names that are broadcast by the application on the channel. */
          broadcasts?: string[];
          /** @description Context type names that the application listens for on the channel. */
          listensFor?: string[];
        }[];
    };
    /** @description App Image holder */
    AppImageV1: {
      /**
       * Format: uri
       * @description App Image URL
       */
      url?: string;
    };
    /** @description (Deprecated v1 API version) Icon holder */
    IconV1: {
      /**
       * Format: uri
       * @description Icon URL
       */
      icon?: string;
    };
    /** @description (Deprecated v1 API version) An intent definition as defined by spec https://github.com/FDC3/Intents/blob/main/src/Intent.yaml */
    IntentV1: {
      /** @description The name of the intent to 'launch'. In this case the name of an Intent supported by an application. */
      name: string;
      /** @description An optional display name for the intent that may be used in UI instead of the name. */
      displayName?: string;
      /** @description A comma separated list of the types of contexts the intent offered by the application can process, where the first part of the context type is the namespace e.g."fdc3.contact, org.symphony.contact" */
      contexts?: string[];
      /**
       * @deprecated
       * @description Custom configuration for the intent that may be required for a particular desktop agent. Deprecated due to a lack of defined use cases.
       */
      customConfig?: Record<string, never>;
    };
    /** @description (Deprecated v1 API version) Defines an application retrieved from an FDC3 App Directory, which can then be launched. Launching typically means running for a user on a desktop. The details around 'launching' including who or what might do it, and how the launch action is initiated are discussed elsewhere in the FDC3 App Directory spec. */
    ApplicationV1: {
      /** @description The unique application identifier located within a specific application directory instance. */
      appId: string;
      /** @description The name of the application. The name should be unique within an FDC3 App Directory instance. The exception to the uniqueness constraint is that an App Directory can hold definitions for multiple versions of the same app. The same appName could occur in other directories. We are not currently specifying app name conventions in the document. */
      name: string;
      /** @description URI or full JSON of the application manifest providing all details related to launch and use requirements as described by the vendor. The format of this manifest is vendor specific, but can be identified by the manifestType attribute. */
      manifest: string;
      /** @description The manifest type which relates to the format and structure of the manifest content. The definition is based on the vendor specific format and definition outside of this specification. */
      manifestType: string;
      /** @description Version of the application. This allows multiple app versions to be defined using the same app name. This can be a triplet but can also include things like 1.2.5 (BETA) */
      version?: string;
      /** @description Optional title for the application, if missing use appName, typically used in a launcher UI. */
      title?: string;
      /** @description Optional tooltip description e.g. for a launcher */
      tooltip?: string;
      /** @description Description of the application. This will typically be a 1-2 paragraph style blurb about the application. Allow mark up language */
      description?: string;
      /** @description Array of images to show the user when they are looking at app description. Each image can have an optional description/tooltip */
      images?: components["schemas"]["AppImageV1"][];
      /**
       * Format: email
       * @description Optional e-mail to receive queries about the application
       */
      contactEmail?: string;
      /**
       * Format: email
       * @description Optional e-mail to receive support requests for the application
       */
      supportEmail?: string;
      /** @description The name of the company that owns the application. The publisher has control over their namespace/app/signature. */
      publisher?: string;
      /** @description Holds Icons used for the application, a Launcher may be able to use multiple Icon sizes or there may be a 'button' Icon */
      icons?: components["schemas"]["IconV1"][];
      /**
       * @deprecated
       * @description An optional set of name value pairs that can be used to deliver custom data from an App Directory to a launcher.
       */
      customConfig?: components["schemas"]["NameValuePair"][];
      /** @description The list of intents implemented by the application as defined by https://github.com/FDC3/Intents/blob/main/src/Intent.yaml */
      intents?: components["schemas"]["IntentV1"][];
    };
    ApplicationSearchResponseV1: {
      /** @description List of applications */
      applications?: components["schemas"]["ApplicationV1"][];
      /** @description Response message providing status of query */
      message?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
